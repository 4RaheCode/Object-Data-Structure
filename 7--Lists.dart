// 1

// نوع اول لیست ها
// fixed length list
// در این نوع لیست به برنامه مشخص میکنیم که این لیست چه تعداد
//  مقدار میتونه داشته باشه و این مقدار دیگه به هیچ وجه تغییر نمیکنه

// مثال اول
// void main(List<String> args) {
//   // در این مثال یک لیست ساختیم که مشخص کردیم تعداد عضوهاش
//   // پنج عدد باشه و مقدار های پیشفرز هم عدد 10 باشه
//   var lst1 = List.filled(5, 10);
//   print(lst1);
// }
// output:
// [10, 10, 10, 10, 10]

// مثال دوم
// void main(List<String> args) {
//   //  در اینجا با استفاده از علامت کوچیکتر و بزرگتر مشخص میکنیم
//   //  که نوع داده ی ذخیره شده در لیست چی باید باشه
//   // که در این مثال گفتیم عدد باشه
//   List lst2 = List<int>.filled(5, 20);
//   print(lst2);

// //   [20, 20, 20, 20, 20]
// // خب الان میام مقدار یکی از ایندکس های لیستمون رو تغییر میدیم
//   lst2[0] = 50;
//   print(lst2);
// //   [50, 20, 20, 20, 20]
// }
// =========================================================================

// 2
// نوع دوم لیست ها
// Growaable List
//  این نوع از لیست ها میتونن تغیر بکنند و محددیت های نوع قبلی رو ندارند

// void main(List<String> args) {
// //   انواع مدل ساخت لیست بدون محدودیت
//   var lst1 = [1, 2, 5, 7];
//   List lst2 = [5, 6, 8, 7, 4, 1, 2];
//   List<String> lst3 = ['omid', 'kian', 'leila'];
// }
// --------------------------------------------------------

// متد ها درلیست

//  با متد اد میتونیم به لیستمون مقدار اضافه کنیم

// void main(List<String> args) {
//   List lst1 = [2, 6, 9];
//   lst1.add(44);
//   print(lst1);
// }
// output:
// [2, 6, 9, 44]
// -----------------------------------------------------

// تغییر مقدار یکی از ایتم های لیست

// void main(List<String> args) {
//   List lst2 = [12, 44, 89];
//   lst2[1] = 10;
//   print(lst2);
// }
// output:
// [12, 10, 89]
// ========================================================
// generate نام کانستراکتور
// ساخت لیست عدد های زوج با جنریت

// void main(List<String> args) {
//   List lst3 = List.generate(10, (n) => n + n);
//   print(lst3);
// }
// // output:
// [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
//---------------------------------------------------------

// مثال دوم جنریت
// ساخت لیستی صفر و یک

// void main(List<String> args) {
//   // اینجا گفتیم اگر ایندکس تقسیم بر دو شد باقیموندش شد صفر
//   // تو لیست صفر زخیره کن درغیر اینصورت یک ذخیره کن
//   // در اخر جنریت هم اگر ازگروبیل استفاده کنیم میتونیم
//   // مشخص کنیم که لیست ثابت باشه یا قابل تغییر
//   List lst1 = List.generate(5, (k) => k % 2 == 0 ? 0 : 1, growable: true);
//   print(lst1);
// }
// output:
// [0, 1, 0, 1, 0]
//============================================================================

// of نام کانسکاکتور
// وظیفه ی آف اینه که از روی لیست لیست بسازه

// void main(List<String> args) {
//   List lst3 = [1, 5, 7, 9, 10];
//   List lst4 = List.of(lst3);
//   print(lst4);
// }
// output    یک نمونه از لیست 3 برام ساخت
// [1, 5, 7, 9, 10]
// ==================================================================================

// unmodifiable نام کانسکاکتور
//  اگر با این نوع کانساکتور لیست بسازیم دیگه به هیچ وجع قابل تغییر نیست

// void main(List<String> args) {
//   List lst0 = [1, 2, 6, 7];
//   List lst1 = List.unmodifiable(lst0);
//   print(lst1);
//   lst1.add(55);
// }
// output:

// Unhandled exception:
// Unsupported operation: Cannot add to an unmodifiable list
// =================================================================================

//  from کانساکتور
// این کانساکتور هم برای ساخت یک لیست جدید از یک لیست موجود هستش
// نکته اینه که لیستهای ساخته شده توست فرام قابل تغیر هستند
// ولی اگر بخایم میتونی تبدیل به فیکس لیستش کنیم
// (List lst2 = List.from(lst1, growable : false);)   به این صورت

// void main(List<String> args) {
//   List lst1 = List.of([1, 5, 6, 8, 7, 4, 2]);
//   List lst2 = List.from(lst1);
//   lst2.add(44);
//   print(lst2);
// }
// output:
// [1, 5, 6, 8, 7, 4, 2, 44]
// =====================================================================

// null sefty در لیست ها
// انواع تعریف نال بودن در لیست ها

// void main(List<String> args) {
// // اگر علامت نال رو اینجوری بزارم یعنی مقدارهای لیست اجاه ی نال بودن را دارند
//   List<String?> list1 = ['one', 'two'];

// // اگر علامت نال رو اینجوری بزارم یعنی هم خود لیست و هم مقدارها میتونن نال باشند
//   List<String?>? list2 = ['a', null];

// // اگر علامت نال رو اینجوری بزارم یعنی فقط خود لیست میتونه نال باشه
//   List<String>? list3;

// // اینم نمونه ای از لیست اینتیجر که هم میتونه لیست نال باشه و هم مقدارهاش
//   List<int?>? list4 = [1, 2, 3, null];

// }
// ================================================================================================

//  متد ها در لیست

// Add متد
// متد اد فقط میتونه یک عنصر اضافه کن

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 4];
//   lst1.add(5);
//   print(lst1);
// }
// output:
// [1, 2, 3, 4, 5]
// -------------------------------------------------------------------

// َAll Add متد
// متد ال اد میتونه چند عنصر رو به یکباره به لیست اضافه کنه

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 4];
//   lst1.addAll([5, 6, 7, 8]);
//   print(lst1);
// }
// output:
// [1, 2, 3, 4, 5, 6, 7, 8]
// ----------------------------------------------------------------------

//  insert متد
// متد اینسرت این قابلیت را دارد که در هر
// ایندکسی که بخایم مقدار رو اضافه کنیم

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 4, 5, 4, 8, 77, 4, 55];
//   lst1.insert(2, 100);
//   print(lst1);
// }
// output:
// [1, 2, 100, 3, 4, 5, 4, 8, 77, 4, 55]
// -----------------------------------------------------------------------

// insert All
// تفاوت اینسرت آل این است که به جای افزودن یک عنصر، چندین
//عنصر را به صورت همزمان به یک لیست اضافه می‌کند

// void main(List<String> args) {
//   List lst1 = [12, 13, 45, 7, 9, 65, 25];
//   lst1.insertAll(4, ['omid', 'kian', 'shahin']);
//   print(lst1);
// }
// output:
// [12, 13, 45, 7, omid, kian, shahin, 9, 65, 25]
// ----------------------------------------------------------------------------------

// remove متد
//  متد ریموو اینچوری کار میکنه که باید نام اون چیزی که در لیست رو
//  که میخایم پاک کنیم رو بهش بدیم چه عدد باشه چه استرینگ باشه

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
//   print(lst1);
//   var result = lst1.remove(3);
//   print(result);
//   print(lst1);
// }

// [1, 2, 3, 4, 5, 6, 7, 8, 9]
// اینجا چون حذف موفقیت امیز بود تروو برگردوند
// true
// [1, 2, 4, 5, 6, 7, 8, 9]
// --------------------------------------------------------------------------------------

// removeAt متد
// متد ریموو ات  اینجوری کار میکنه که میتونیم
// ایندنت بهش بدیم و دیگه نیازی نیست اسم ایتم رو بهش بدیم

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
//   print(lst1);
//   var result = lst1.removeAt(2);
//   print(result);
//   print(lst1);
// }

// [1, 2, 3, 4, 5, 6, 7, 8, 9]
// اینجا چون حذف موفقیت امیز بود اون ایتمی رو که حذف کرده رو نشونمون میده
// 3
// [1, 2, 4, 5, 6, 7, 8, 9]
// ---------------------------------------------------------------------------------------------------

//  removeLast متد
// این میاد میاد اخرین ایندکس لیست رو پاک میکنه

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
//   print(lst1);
//   lst1.removeLast();
//   print(lst1);
// }
// [1, 2, 3, 4, 5, 6, 7, 8, 9]
// [1, 2, 3, 4, 5, 6, 7, 8]
// -----------------------------------------------------------------------------------------------

// removeRange متد
//  با این متد میتونیم تایین کنیم از کدوم ایندکس تا کدوم ایندکس رو حذف کن

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
//   print(lst1);
//   lst1.removeRange(1, 4);
//   print(lst1);
// }

// [1, 2, 3, 4, 5, 6, 7, 8, 9]
// [1, 5, 6, 7, 8, 9]
// -------------------------------------------------------------------------------------------------------

// sublist متد
// با این متد میتونیم از یک لیست دیگه لیستی بسازیم
// که شروع ایندکس و پایان رو میتونیم تایین کنیم

// void main(List<String> args) {
//   List lst = [1, 2, 3, 4, 5];
//   List sublist_lst = lst.sublist(1, 3);
//   print(sublist_lst);
// }

// output:
// [2, 3]
// --------------------------------------------------------------------------------------------------------

// shuffel متد
// با این متد میتونیم از یک لیست یک لیست جدید
//  به هم ریخته تولید کنیم که هر بار که اجراع بشه
// شکل لیست فرق میکنه یه جورایی مثل رندوم عمل میکنه

// void main(List<String> args) {
//   List lst = [1, 2, 3, 4, 5];
//   print(lst);
//   lst.shuffle();
//   print(lst);
// }

// // output:
// 1, 2, 3, 4, 5]
// [2, 1, 3, 4, 5]
// ----------------------------------------------------------------------------------------------------------

// map   مپ در لیست ها
// شماره گزاری ایندکس های یک لیست با استفاده از مپ

// void main(List<String> args) {
//   List<String> sports = ['fotball', 'tennis', 'koshti'];
// //   نکته ای که وجود داره اینه که مپ یک کلید باید داشته باشه و یک مقدار
// // که در کد زیر بهش گفتیم کلیدهات اینت هستش و مقدارهات استرینگ هستش
//   Map<int, String> map1 = sports.asMap();
//   print(map1);
// }

// output:
// {0: fotball, 1: tennis, 2: koshti}
// --------------------------------------------------------------------------------------------------

//  map   مثال
// یک لیست از اعداد ایجاد کنید و تمامی اعداد
// را  با استفاده از مپ دو برابر کنید

// void main(List<String> args) {
//   List<num> lst1 = [3, 2, 4, 5, 7, 8, 10, 9, 6, 1, 0];
//   List<num> double_lst1 = lst1.map((a) => a * 2).toList();
//   print(double_lst1);
// }
// output:
// [6, 4, 8, 10, 14, 16, 20, 18, 12, 2, 0]
// -------------------------------------------------------------------------------------------------------------

// whereType  متد
// با این متد میتونیم بگیم که من چه نوع از مقدارهای
// داخل یک لیست رو میخام مثلا اینت یا استرینگ یا دابل

// void main(List<String> args) {
//   List mixList = [1, 'a', 2, 'b', 3, 'c'];
// //   تو این خط کد گفتیم اینت هارو میخایم
//   var list1 = mixList.whereType<int>();
//   print(list1);
//   //  تو این خط کد گفتیم استرینگ ها رو میخایم
//   var list2 = mixList.whereType<String>();
//   print(list2);
// }

// // output:
// (1, 2, 3)
// (a, b, c)
// -----------------------------------------------------------------------------------------------------------

// replaceRange متد
// با این متد میتونیم بگیم که از فلان ایندکس تا فلان ایندکس این چیزایی
// رو که بهت میدم رو جابه جا کن

// void main(List<String> args) {
//   List lst1 = [0, 1, 2, 3, 4, 5, 6];
//   print(lst1);
//   lst1.replaceRange(1, 3, [10, 20, 50]);
//   print(lst1);
// }

// output:
// [0, 1, 2, 3, 4, 5, 6]
// [0, 10, 20, 50, 3, 4, 5, 6]
// ---------------------------------------------------------------------------------------------------------------

//  firstWhere  متد
// با این متد میتونیم شرط هایی بنویسیم که این متد میره  تو لیست و
//  در لیست به اولین ایتمی که با شرط ما همخوانی داره رو واسمون چاپ میکنه

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
//   print(lst1.firstWhere((i) => i > 3));
// }

// output:
// خب چون عدد چهار اولین ایتمی بود که از عدد سه بزرگتر بود رو بهمون نشون داد
//  4
// ------------------------------------------------------------------------------------------------------------

// lastwhere  متد
// این متد برعکس بالایی اخرین عددی که شرط ما را داشته باشد برمیگرداند مثل مثال زیر

// اخرین عددی را پیدا کنید که فرد باشد و مقدار ان کمتر از 50 باشد

// void main(List<String> args) {
//   List<int> list1 = [12, 45, 23, 51, 40];
//   var result = list1.lastWhere((a) => a % 2 != 0 && a < 50);
//   print(result);
// }
// output:     23
// ---------------------------------------------------------------------------------------------------------------

// singleWhere متد
// این متد هم برای پیدا کردن ایتمی در لیست هستش و نکته ای که داره
//  اینه که اون ایتم در لیست باید یک نمونه ازش وجود داشته باشه
// از دوتا باشه ارور میده

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9];
//   print(lst1.singleWhere((i) => i == 3));
// }
// output:
//   خب خروجی این خط شد عدد 3
// ولی اگر دوتا سه وجود داشت این ارور رو میداد
// Unhandled exception:
// Bad state: Too many elements
// ----------------------------------------------------------------------------------------------------------------

// fold متد
// این متد برای اینه که ما بتونیم روی اعضای لیست حرکت کنیم و روی ان عملیات ها مختلفی
//  مانند جمع یا تفریق یا ضرب یا تقیسم و غیره را انجام بدیم
// فقط نکته ای که وجود داره اینه که این متد از ما مقدار اولیه هم میخاد

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9];
//   num result = lst1.fold(0, (i, j) => i + j);
//   print(result);
// }

// output
//  48
// -----------------------------------------------------------------------------------------------------

// reduce  متد
//  این متد هم مثل متد فولد هستش فقط نیازی به وارد کردن مقدار اولیه نداره

// void main(List<String> args) {
//   List lst1 = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9];
//   num result = lst1.reduce((i, j) => i + j);
//   print(result);
// }

// output:
//  48
// --------------------------------------------------------------------------------------------------------

// followedBy متد
// با این متد میتونیم به اخر لیست ایتم های دلخاه رو اضافه کنیم

// void main(List<String> args) {
//   List lst1 = ['omid', 'kian'];
//   print(lst1.followedBy(['leila', 'shahin']));
// }

// output:
// (omid, kian, leila, shahin)
// ------------------------------------------------------------------------------------------------------

// any  متد
// با این متد میتونیم چک کنیم که اون چیزی که دنبالشیم داخل لیست هست یانه
//  که جواب رو با تروو و فالس برمیگردونه

// void main(List<String> args) {
//   List lst1 = ['omid', 'kian', 'leila'];
//   var result = lst1.any((w) => w.contains('omid'));
//   print(result);
// }

// output:
// true
// -----------------------------------------------------------------------------------------------------

// every متد
// این متد چک میکنه که ایا تمام ایتم های این لیست
//از این شرطی که میگیم پیروی میکنه یا نه

// void main(List<String> args) {
//   List lst1 = ['omid', 'oian', 'oeila'];
//   var result = lst1.every((i) => i.startsWith('o'));
//   print(result);
// }

// output
// الان توی این مثال گفتیم چک کن ببین اول تمام کلمه ها با حرف او شروع میشه یانه
// true
// --------------------------------------------------------------------------------------------------------

// take متد
// این متد میاد هر چند تا تعداد که بهش بگیم ایتم از لیست میکشه بیرون و بهمون نشون میده

// void main(List<String> args) {
//   List lst1 = ['omid', 'leila', 'keila'];
//   print(lst1.take(2));
// }
// output:
// (omid, leila)

// =========================================================================================================
// =========================================================================================================

// property  پراپرتی در لیست


// first پراپرتی
// اولین ایتم لیست رو برمیگردونه

// void main(List<String> args) {
//   List lst1 = [];
//   lst1.add(12);
//   lst1.add(13);
//   print(lst1.first);
// }

// output:
// 12
// --------------------------------------------------------------------------------------------

// Last پراپرتی
// تخرین ایتم لیست رو برمیگردونه

// void main(List<String> args) {
//   List lst1 = [];
//   lst1.add(12);
//   lst1.add(13);
//   print(lst1.last);
// }
// output:
// 13

// -------------------------------------------------------------------------------------------

// isEmpty  پراپرتی
//  چک میکنه که ایا لیست خالیه

// void main(List<String> args) {
//   List lst1 = [];
//   lst1.add(12);
//   lst1.add(13);
//   print(lst1.isEmpty);
// }
// چون لیست خالی نبود فالس برگردوند
// false
// -----------------------------------------------------------------------------------------------

// isNotEmpty  پراپرتی
// چک میکنه که ایا لیست خالی نیست

// void main(List<String> args) {
//   List lst1 = [];
//   lst1.add(12);
//   lst1.add(13);
//   print(lst1.isNotEmpty);
// }

// چون لیست خالی نبود ترو برمیگردونه
// true
// --------------- -----------------------------------------------------------------------------------

// length   پراپرتی
// سایز لیست رو برمیگردونه

// void main(List<String> args) {
//   List lst1 = [];
//   lst1.add(12);
//   lst1.add(13);
//   print(lst1.length);
// }
// چون لیستمون دوتا ایتم داره دو رو برگردوند
// 2
// -------------------------------------------------------------------------------------------------------

// reversed  پراپرتی
//این پراپرتی لیست رو برعکس میکنه

// void main(List<String> args) {
//   List lst1 = [];
//   lst1.add(12);
//   lst1.add(13);
//   print(lst1);
//   print(lst1.reversed);
// }
// output:
// [12, 13]
// (13, 12)
// ------------------------------------------------------------------------------------------------------------

// single  پراپرتی
// چک میکنه که لیست تنها یک ایتم داره یانه

// void main(List<String> args) {
//   List lst1 = [];
//   lst1.add(12);
//   lst1.add(13);
//   print(lst1.single);
// }
// اگر لیست یک ایتم داشته باشه اون ایتم رو برمیگردونه اما
// اینجا چون لیستمون دو تا ایتم داشت ارور داد
// Unhandled exception:
// Bad state: Too many elements
// #0      List.single (dart:core-patch/growable_array.dart:355:5)
// #1      main (file:///d:/2.Dart/Amozesh/Amozesh/7--Lists.dart:340:14)
// #2      _delayEntrypointInvocation.<anonymous closure> (dart:isolate-patch/isolate_patch.dart:295:33)
// #3      _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:184:12)
// ====================================================================================================================


// Spread Operator
// عملگر پخش (Spread Operator) 
// عملگر ... در دارت عملگر پخش  نامیده می‌شود. این عملگر به شما اجازه می‌دهد
// محتویات یک لیست یا مجموعه را در داخل یک ساختار دیگر
// مثل لیست جدید پخش کنید. این ویژگی از دارت 2.3 به بعد معرفی شده
//  کاربردهای جالب و متنوعی دارد.

// 1. ترکیب چند لیست
// می‌توانید محتویات چند لیست را به سادگی ترکیب کنید

// void main(List<String> args) {
// List<int> list1 = [1, 2, 3];
// List<int> list2 = [4, 5, 6];
// List<int> combined = [...list1, ...list2];
// print(combined); 
// }
// output:
// [1, 2, 3, 4, 5, 6]
// --------------------------------------------------------------------------------------------------------
// 2. اضافه کردن عناصر اضافی به لیست
// می‌توانید یک یا چند عنصر به یک لیست موجود اضافه کنید

// void main(List<String> args) {
//   List<int> numbers = [1, 2, 3];
// List<int> updated = [...numbers, 4, 5];
// print(updated);

// }
// output:
 // [1, 2, 3, 4, 5]
//  --------------------------------------------------------------------------------------------------
// 3. ایجاد کپی از یک لیست
// می‌توانید کپی دقیقی از یک لیست ایجاد کنید
// بدون اینکه تغییری در لیست اصلی ایجاد شود

// void main(List<String> args) {
//   List<int> original = [1, 2, 3];
// List<int> copy = [...original];
// print(copy); 

// }
// output:
// [1, 2, 3]
// ================================================================================================================

// forEach مزایای استفاده از 
// for کد کوتاه‌تر و خواناتر نسبت به حلقه 
// مناسب برای عملیات ساده و سریع روی مجموعه‌ها.
//  forEach
// این متد برای اجرای یک عملیات (مثل چاپ کردن، محاسبات، یا هر نوع تغییر) بر روی هر عنصر لیست
// ست یا مپ استفاده میشود
// این متد یک تابع به عنوان ورودی دریافت می‌کند و آن را برای هر عنصر اجرا می‌کند.
// یه جورایی مثل حله فور هستش ولی برای عملیات های ساده استفاده میشود

// مثال
// یک لیست از رشته‌هاایجاد کنید. با استفاده از
// forEach
// هر عنصر لیست را چاپ کنید

// void main(List<String> args) {
//   List<String> lst1 = ['apple', 'banana', 'cherry'];
//   lst1.forEach((num){
//     print(num);
//   });
// }
// output:
// apple
// banana
// cherry
// --------------------------------------------------------------------------------------

// forEach   جمع کردن اعداد لیست با 

// void main(List<String> args) {
//   List<int> list1 = [1, 2, 3, 4, 5];
//   int sum = 0;
//   list1.forEach((a){
//     sum += a;
//   });
//   print(sum);
// }
// output:         15
// =================================================================================================
// 