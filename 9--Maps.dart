// // Map
// // انواع روش ساختن مپ

// void main(List<String> args) {
//   // در این حالت بهش فهمونیدیم که هم کلید و هم مقدار ها استرینگ هستند
//   var data = {'name': 'omid', 'website': 'kiancoding.com'};

//   // در این حالت چون کلید هارو عدد و مقدار هارو استرینگ گزاشتیم
//   // متوجه میشه  که جنسشون به چه صورته
//   Map words1 = {1: 'user', 2: 'pass', 3: 'email'};

//   // اینجا همون اول جلوی خود مپ جنس کلید و مقدار رو مشخص کردیم
//   Map<int, String> words2 = {1: 'user', 2: 'pass', 3: 'email'};

//   // و اینجا هم جلوی مپ و هم جلوی متغییر جنس کلید و مقدار رو مشخص کردیم
//   Map<int, String> words3 = <int, String>{1: 'user', 2: 'pass', 3: 'email'};
// }
// -------------------------------------------------------------------------------------------
// روش بعدی ساخت مپ

// void main(List<String> args) {
// Map data = Map();
// print(data);
// }

// output:        {}
// ----------------------------------------------------------------------------------------------
// روش اضافه کردن مقدار به مپ

// void main(List<String> args) {
//   Map<int, String> data = <int, String>{1: 'user', 2: 'pass', 3: 'email'};

// اول مپ رو صدا میزنیم و اول کلید که اینت هست
// و بعد مقدار که استرینگ هست رو واد میکنیم

//   data[4] = 'adress';
//   print(data);
// }

// output:
// {1: user, 2: pass, 3: email, 4: adress}
// ---------------------------------------------------------------------------------------------------
// نال سفتی در مپ

// دقیقا مثل همون قانونی که در لیستها داشتیم هستش
// الان تو این مثال با توجه به علامت سوالهایی که گزاشتیم
// هم خود مپ و هم کلید و مقدار میتونند نال باشند

// void main(List<String> args) {
//   Map<String?, String?>? data = {null: null};
//   print(data);

// }
// output:     {null: null}
// ==============================================================================================================
// ==============================================================================================================

// پراپرتی ها در مپ
// property

// isEmpty   پراپرتی
// چک میکنه که ایا مپ خالیه
// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   print(data.isEmpty);
// }

// output:           false
//  -----------------------------------------------------------------------------------------------------------

// isNotEmpty    پراپرتی
// چک مینه که ایا مپ خالی نیست

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   print(data.isNotEmpty);
// }
// output:             true
//  ------------------------------------------------------------------------------------------------------------

// keys  پراپرتی
// کلید های مپ رو بهمون نشون میده

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   print(data.keys);
// }
// output:        (1, 2)
//-------------------------------------------------------------------------------------------------------------

// values   پراپرتی
// مقدار های مپ رو بهمون نشون میده

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   print(data.values);
// }

//output:     (omid, kian)
// ===================================================================================================================
// method
// متدها در مپ

// clear   متد
// تمام مپ رو پاکسازی میکنه

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   print(data);
//   data.clear();
//   print(data);
// }

// // output:
// {1: omid, 2: kian}
// {}
//-----------------------------------------------------------------------------------------------------------------------------

// containsKey متد
// چک میگنه ایا اون کلیدی که بهش میدیم داخل مپ هست یا نه

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   print(data.containsKey(1));
// }

// output:     true
// -------------------------------------------------------------------------------------------------------------------

// containsValue   متد
// چک میگنه ایا اون مقداری  که بهش میدیم داخل مپ هست یا نه

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   print(data.containsValue('omid'));
// }

// output:  true
// ---------------------------------------------------------------------------------------------------------------------

// remove(key)   متد
// اون کلیدی که بهش میدیم رو حذف میکنه

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   print(data);
//   data.remove(1);
//   print(data);
// }

// output:
// {1: omid, 2: kian}
// {2: kian}
// -------------------------------------------------------------------------------------------------------------------------

// removeWhere((key, value)  متد
//  با این متد میتونیم با استفاده از شرط هایی  که میزاریم
// اون کلید یا مقداری که اون شرط رو داره حذف کنیم

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   data.removeWhere((key, value) => value.startsWith('o'));
//   print(data);
// }

// output:       {2: kian}
// ----------------------------------------------------------------------------------------------------------

// addAll   متد
// با این متد میتونیم مقادیر یک مپ رو داخل یک مپ دیگه اضافه کنیم

// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   Map new_data = Map();
//   new_data.addAll(data);
//   print('new_data: $new_data');
// }

// output:
// new_data: {1: omid, 2: kian}
// -------------------------------------------------------------------------------------------------------------

// putIfAbsent   متد
// به این متد یه کلید میدیم و یه یه مقدار اگر اون کلید
// داخل مپ نباشه اون کلید و مقدار رو به مپ اضافه میکنه
// void main(List<String> args) {
//   Map<int, String> data = {1: 'omid', 2: 'kian'};
//   data.putIfAbsent(3, () => 'Leila');
//   print(data);
// }
// output:
// {1: omid, 2: kian, 3: Leila}

// ------------------------------------------------------------------------------------------------------------------

// fromIterables  متد
// با این متد میتونیم دو تا لیست رو به صورت کلید و مقدار با هم ترکیب کنیم


// void main(List<String> args) {
//   List<String> letters = ['A', 'B', 'C', 'D', 'E'];
//   List<int> numbers = [1, 2, 3, 4, 5];
//   Map data = Map<int, String>.fromIterables(numbers, letters);
//   print(data);
// }
// output:
// {1: A, 2: B, 3: C, 4: D, 5: E}
// ========================================================================================================================
//  چند روش متفاوت برای ترکیب مپ ها با همدیگر
 
//  روش اول
 // Spread Operator ترکیب مپ ها با استفاده از 


// void main(List<String> args) {
//   Map m1 = {1: 'Apple', 2: 'Orange'}; 
//   Map m2 = {3: 'Banana'};             
//   Map m3 = {4: 'Mango'};   

//   var fruit1 = {...m1, ...m2, ...m3};
//   print(fruit3); 
// }

// output:
// {1: Apple, 2: Orange, 3: Banana, 4: Mango}
// ---------------------------------------------------------------------------------------------------------------

//  روش دوم
// Cascade Notation ترکیب مپ ها با روش 

// void main(List<String> args) {
//   Map m1 = {1: 'Apple', 2: 'Orange'}; 
//   Map m2 = {3: 'Banana'};             
//   Map m3 = {4: 'Mango'};   

//   Map  fruit2 = {}..addAll(m1)..addAll(m2)..addAll(m3);
//   print(fruit2);
// }

// output:
// {1: Apple, 2: Orange, 3: Banana, 4: Mango}
// ------------------------------------------------------------------------------------------------------
// روش سوم
// در این کد، از ترکیبی از 
// Cascade Notation و Copy Constructor
// استفاده شده است

//  void main(List<String> args) {
//   Map m1 = {1: 'Apple', 2: 'Orange'}; 
//   Map m2 = {3: 'Banana'};             
//   Map m3 = {4: 'Mango'};   

//   var  fruit3 = Map.from(m1)..addAll(m2)..addAll(m3);
//   print(fruit3);
// }

// output:
// {1: Apple, 2: Orange, 3: Banana, 4: Mango}  
// ================================================================================================================
